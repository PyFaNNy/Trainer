#pragma checksum "D:\Programming\C#\Лабораторные\Trainer\Views\Examination\GetModel.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ffb7050b18d7aa60f4897425185d5aad7363ccaa"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Examination_GetModel), @"mvc.1.0.view", @"/Views/Examination/GetModel.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Programming\C#\Лабораторные\Trainer\Views\_ViewImports.cshtml"
using Trainer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Programming\C#\Лабораторные\Trainer\Views\_ViewImports.cshtml"
using Trainer.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ffb7050b18d7aa60f4897425185d5aad7363ccaa", @"/Views/Examination/GetModel.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"256ce042e4b0c6a2aa33db64dc002cecfd80fd5d", @"/Views/_ViewImports.cshtml")]
    public class Views_Examination_GetModel : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "3", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "4", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/signalr/dist/browser/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Programming\C#\Лабораторные\Trainer\Views\Examination\GetModel.cshtml"
  
    ViewData["Title"] = "Сеанс";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div class=""row mb-2"">
    <button type=""button"" id=""start"" class=""btn btn-success btn-block"">Начать сеанс</button>
</div>
<div class=""container"" style=""height: calc(100vh - 200px);"">
    <div class=""row h-100"">
        <div class=""col human h-100"">
            <div class=""row h-25"">
                <div class=""col-4"">
                    <select id=""2"" class=""form-control"" style=""opacity: 0.5;"" onchange='findOption2(this)'>
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa5727", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa6869", async() => {
                WriteLiteral("Тонометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa8054", async() => {
                WriteLiteral("Термометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa9240", async() => {
                WriteLiteral("Пульсометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa10427", async() => {
                WriteLiteral("Оксиметр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </div>
            </div>
            <div class=""row h-25"">
                <div class=""col-4"">
                    <select id=""3"" class=""form-control"" style=""opacity: 0.5;"" onchange='findOption3(this)'>
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa11879", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa13022", async() => {
                WriteLiteral("Тонометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa14208", async() => {
                WriteLiteral("Термометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa15395", async() => {
                WriteLiteral("Пульсометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa16583", async() => {
                WriteLiteral("Оксиметр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </div>
                <div class=""col""></div>
                <div class=""col-4"">
                    <select id=""1"" class=""form-control"" style=""opacity: 0.5;"" onchange='findOption1(this)'>
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa18020", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa19163", async() => {
                WriteLiteral("Тонометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa20349", async() => {
                WriteLiteral("Термометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa21536", async() => {
                WriteLiteral("Пульсометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa22724", async() => {
                WriteLiteral("Оксиметр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </div>
            </div>
            <div class=""row h-25"">
                <div class=""col-4""></div>
                <div class=""col-4"">
                    <select id=""4"" class=""form-control"" style=""opacity: 0.5;"" onchange='findOption4(this)'>
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa24221", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa25364", async() => {
                WriteLiteral("Тонометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa26550", async() => {
                WriteLiteral("Термометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa27737", async() => {
                WriteLiteral("Пульсометр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa28925", async() => {
                WriteLiteral("Оксиметр");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </div>
            </div>
        </div>
        <div class=""col h-100"" style=""overflow-y: auto;"">
            <div class=""row h-25"">
                <div class=""col tonometr""></div>
                <div class=""col"">
                    <button type=""button"" id=""testTonometr"" class=""btn btn-primary mt-1"">Тестировать</button>

                    <div class=""form-check"">
                        <input class=""form-check-input"" value=""1"" type=""radio"" name=""tonometr"" id=""tonometrON"" onclick=""tonometrClick(this);"">
                        <label class=""form-check-label"" for=""tonometrON"">
                            Вкл
                        </label>
                    </div>
                    <div class=""form-check"">
                        <input class=""form-check-input"" value=""0"" type=""radio"" name=""tonometr"" id=""tonometrOFF"" onclick=""tonometrClick(this);"" checked>
                        <label class=""form-check-label"" for=""tonometrOFF"">
   ");
            WriteLiteral(@"                         Выкл
                        </label>
                    </div>
                </div>
            </div>
            <div class=""row h-50 mb-5"">
                <div class=""card"">
                    <h4 class=""card-header"">
                        Измерение давления
                    </h4>
                    <div class=""card-body"">
                        <canvas id=""myChart"" height=""300"" width=""500"">Chart is Loading...</canvas>
                    </div>
                </div>
            </div>
            <div class=""row h-25"">
                <div class=""col termometr""></div>
                <div class=""col"">
                    <button type=""button"" id=""testTermometr"" class=""btn btn-primary mt-1"">Тестировать</button>
                    <div class=""form-check"">
                        <input class=""form-check-input"" value=""1"" type=""radio"" name=""termometr"" id=""termometrON"" onclick=""termometrClick(this);"">
                        <label class=""form-check-");
            WriteLiteral(@"label"" for=""termometrON"">
                            Вкл
                        </label>
                    </div>
                    <div class=""form-check"">
                        <input class=""form-check-input"" value=""0"" type=""radio"" name=""termometr"" id=""termometrOFF"" onclick=""termometrClick(this);"" checked>
                        <label class=""form-check-label"" for=""termometrOFF"">
                            Выкл
                        </label>
                    </div>
                </div>
            </div>
            <div class=""row h-50 mb-5"">
                <div class=""card"">
                    <h4 class=""card-header"">
                        Измерение температуры
                    </h4>
                    <div class=""card-body"">
                        <canvas id=""myChart1"" width=""500"" height=""300"">Chart is Loading...</canvas>
                    </div>
                </div>
            </div>
            <div class=""row h-25"">
                <div class=""col ");
            WriteLiteral(@"heartrate""></div>
                <div class=""col"">
                    <button type=""button"" id=""testHeartrate"" class=""btn btn-primary mt-1"">Тестировать</button>
                    <div class=""form-check"">
                        <input class=""form-check-input"" value=""1"" type=""radio"" name=""heartrate"" id=""heartrateON"" onclick=""heartrateClick(this);"">
                        <label class=""form-check-label"" for=""heartrateON"">
                            Вкл
                        </label>
                    </div>
                    <div class=""form-check"">
                        <input class=""form-check-input"" value=""0"" type=""radio"" name=""heartrate"" id=""heartrateOFF"" onclick=""heartrateClick(this);"" checked>
                        <label class=""form-check-label"" for=""heartrateOFF"">
                            Выкл
                        </label>
                    </div>
                </div>
            </div>
            <div class=""row h-50 mb-5"">
                <div class=""card"">");
            WriteLiteral(@"
                    <h4 class=""card-header"">
                        Измерение пульса
                    </h4>
                    <div class=""card-body"">
                        <canvas id=""myChart2"" width=""500"" height=""300"">Chart is Loading...</canvas>
                    </div>
                </div>
            </div>
            <div class=""row h-25"">
                <div class=""col oximetr""></div>
                <div class=""col"">
                    <button type=""button"" id=""testOximetr"" class=""btn btn-primary mt-1"">Тестировать</button>
                    <div class=""form-check"">
                        <input class=""form-check-input"" value=""1"" type=""radio"" name=""oximetr"" id=""oximetrON"" onclick=""oximetrClick(this);"">
                        <label class=""form-check-label"" for=""oximetrON"">
                            Вкл
                        </label>
                    </div>
                    <div class=""form-check"">
                        <input class=""form-check-input"" v");
            WriteLiteral(@"alue=""0"" type=""radio"" name=""oximetr"" id=""oximetrOFF"" onclick=""oximetrClick(this);"" checked>
                        <label class=""form-check-label"" for=""oximetrOFF"">
                            Выкл
                        </label>
                    </div>
                </div>
            </div>
            <div class=""row h-50 mb-5"">
                <div class=""card"">
                    <h4 class=""card-header"">
                        Измерение содержания кислорода в крови
                    </h4>
                    <div class=""card-body"">
                        <canvas id=""myChart3"" width=""500"" height=""300"">Chart is Loading...</canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script src=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.6.0/chart.min.js"" integrity=""sha512-GMGzUEevhWh8Tc/njS0bDpwgxdCJLQBWG3Z2Ct+JGOpVnEmjvNx6ts4v6A2XJf1HOrtOsfhv3hBKpK9kE5z8AQ=="" crossorigin=""anonymous"" referrerpolicy=""no-referrer""></");
            WriteLiteral("script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7050b18d7aa60f4897425185d5aad7363ccaa36690", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<script type=""text/javascript"">
    var connection = new signalR.HubConnectionBuilder().withUrl(""/chart"").build();
    let statTermometr = -1;
    let statTonometr = -1;
    let statHeartrate = -1;
    let statOximetr = -1;
    let select1 = -1;
    let select2 = -1;
    let select3 = -1;
    let select4 = -1;
    let tonometrValue = 0;
    let termometrValue = 0;
    let heartrateValue = 0;
    let oximetrValue = 0;

    window.onload = function () {

        var ctx = document.getElementById('myChart').getContext('2d');

        window.myChart = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Dia',
                    data: [],
                },
                    {
                        label: 'Sis',
                        data: [],
                    }
                ]
            },
            options: {
                scales: {
                    xAxis: {
                        type:");
            WriteLiteral(@" 'linear',
                        suggestedMin: 0,
                        suggestedMax: 60,
                        step:1
                    },
                    y: {
                        suggestedMin: 0,
                        suggestedMax: 200,
                        step: 10,
                    }
                }
            }
        });

        var ctx = document.getElementById('myChart1').getContext('2d');
        
        window.myChart1 = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Температура',
                    data: []
                }]
            },
            options: {
                scales: {
                    xAxis: {
                        type: 'linear',
                        suggestedMin: 0,
                        suggestedMax: 60,
                        step: 1
                    },
                    y: {
                        suggestedMin: 0,
      ");
            WriteLiteral(@"                  suggestedMax: 50,
                        step: 2
                    }
                }
            }
        });

        var ctx = document.getElementById('myChart2').getContext('2d');

        window.myChart2 = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Пульс',
                    data: []
                }]
            },
            options: {
                scales: {
                    xAxis: {
                        type: 'linear',
                        suggestedMin: 0,
                        suggestedMax: 60,
                        step: 1
                    },
                    y: {
                        suggestedMin: 0,
                        suggestedMax: 100,
                        step: 5,
                    }
                }
            }
        });

        var ctx = document.getElementById('myChart3').getContext('2d');

        window.myChart3 =");
            WriteLiteral(@" new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Сепарация',
                    data: []
                }]
            },
            options: {
                scales: {
                    xAxis: {
                        type: 'linear',
                        suggestedMin: 0,
                        suggestedMax: 60,
                        step: 1
                    },
                    y: {
                        suggestedMin: 0,
                        suggestedMax: 100,
                        step: 5,
                    }
                }
            }
        });

    }

    connection.on(""newTonom"", function (time, dia, sis) {

        myChart.data.datasets[0].data.push({
            x: time,
            y: dia
        });
        myChart.data.datasets[1].data.push({
            x: time,
            y: sis
        });
        myChart.update();
    });

    connection.on(""newTermom");
            WriteLiteral(@""", function (time, temp) {

        myChart1.data.datasets[0].data.push({
            x: time,
            y: temp
        });
        myChart1.update();
    });

    connection.on(""newHearRate"", function (time, heartRate) {

        myChart2.data.datasets[0].data.push({
            x: time,
            y: heartRate
        });
        myChart2.update();
    });

    connection.on(""newOximetr"", function (time, separation) {

        myChart3.data.datasets[0].data.push({
            x: time,
            y: separation
        });
        myChart3.update();
    });

    connection.on(""statusTonometr"", function (status, count) {
        statTonometr = count;
        window.alert(""Тонометр "" + status);
    });

    connection.on(""statusTermometr"", function (status, count) {
        statTermometr = count;
        window.alert(""Термометр "" + status);
    });

    connection.on(""statusHeartrate"", function (status, count) {
        statHeartrate = count;
        window.alert(""Пул");
            WriteLiteral(@"ьсометр "" + status);
    });

    connection.on(""statusOximetr"", function (status, count) {
        statOximetr = count;
        window.alert(""Оксиметр "" + status);
    });

    connection.on(""error"", function (messange) {
        window.alert(messange);
    });

    document.getElementById(""start"").addEventListener(""click"", function (e) {
        let id = """);
#nullable restore
#line 374 "D:\Programming\C#\Лабораторные\Trainer\Views\Examination\GetModel.cshtml"
             Write(ViewBag.Id);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"""
        connection.invoke(""ProvideReading"", statTermometr.toString(), statTonometr.toString(), statHeartrate.toString(), statOximetr.toString(),
            select1.toString(), select2.toString(), select3.toString(), select4.toString(), tonometrValue.toString(), termometrValue.toString(), heartrateValue.toString(), oximetrValue.toString(), id);
    });

    document.getElementById(""testTonometr"").addEventListener(""click"", function (e) {
        connection.invoke(""TestTonomert"");
    });

    document.getElementById(""testTermometr"").addEventListener(""click"", function (e) {
        connection.invoke(""TestTermometr"");
    });

    connection.on('RedirectHome', data => {
        window.location.href = `/Examination/GetModels`
    });

    document.getElementById(""testHeartrate"").addEventListener(""click"", function (e) {
        connection.invoke(""TestHeartrate"");
    });

    document.getElementById(""testOximetr"").addEventListener(""click"", function (e) {
        connection.invoke(""TestOxime");
            WriteLiteral(@"tr"");
    });

    function findOption1(select) {
        select1 = select.querySelector(`option[value=""${select.value}""]`).value
    }

    function findOption2(select) {
        select2 = select.querySelector(`option[value=""${select.value}""]`).value
    }

    function findOption3(select) {
        select3 = select.querySelector(`option[value=""${select.value}""]`).value
    }

    function findOption4(select) {
        select4 = select.querySelector(`option[value=""${select.value}""]`).value
    }

    function tonometrClick(myRadio) {
        tonometrValue = myRadio.value;
    }

    function termometrClick(myRadio) {
        termometrValue = myRadio.value;
    }

    function heartrateClick(myRadio) {
        heartrateValue = myRadio.value;
    }

    function oximetrClick(myRadio) {
        oximetrValue = myRadio.value;
    }

    connection.start();
</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
